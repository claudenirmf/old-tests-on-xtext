grammar br.ufes.inf.nemo.ontol.OntoL with org.eclipse.xtext.common.Terminals

import "http://www.nemo.inf.ufes.br/ontol/OntoL" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	'module' name = QualifiedName '{'
		( 
			'include' includes+=[Model|QualifiedName] ';'
			| elements+=ModelElement
		)*
	'}'
;

ModelElement:
	( Import | EntityDeclaration | GeneralizationSet ) ';'
;

QualifiedName:
	ID ('.' ID)*
;

QualifiedNameWithWildcard:
	QualifiedName '.*'?
;

Import:
	'import' importedNamespace = QualifiedNameWithWildcard 
;

EntityDeclaration:
	OntoLClass | Individual
;

Individual:
	'individual' name=ID
	(':' instantiatedClasses+=[OntoLClass|QualifiedName] (',' instantiatedClasses+=[OntoLClass|QualifiedName])*)?
	('{' ( 
		attAssignments+=AttributeAssignment
		| refAssignments+=ReferenceAssignment
	)* '}')?
;

OntoLClass:
	( OrderlessClass | HOClass | FOClass ) 
	('{' ( 
		attributes+=Attribute
		| attributes+=RegularityAttribute
		| attAssignments+=AttributeAssignment
		| references+=Reference
		| references+=RegularityReference
		| refAssignments+=ReferenceAssignment
	)* '}')?
;

OrderlessClass:
	'orderless' 'class' name=ID
	(':' instantiatedClasses+=[OntoLClass|QualifiedName] (',' instantiatedClasses+=[OntoLClass|QualifiedName])*)?
	('specializes' superClasses+=[OntoLClass|QualifiedName] (',' superClasses+=[OntoLClass|QualifiedName])*)?
	('subordinatedTo' subordinators+=[OntoLClass|QualifiedName] (',' subordinators+=[OntoLClass|QualifiedName])*)?
	( 
		(categorizationType=CategorizationType basetype=[OntoLClass|QualifiedName])
		| ('isPowertypeOf' powertypeOf=[OntoLClass|QualifiedName])
	)?
;

FOClass:
	('first-order')? 'class' name=ID
	(':' instantiatedClasses+=[OntoLClass|QualifiedName] (',' instantiatedClasses+=[OntoLClass|QualifiedName])*)?
	('specializes' superClasses+=[OntoLClass|QualifiedName] (',' superClasses+=[OntoLClass|QualifiedName])*)?
;

HOClass:
	'order' order=INT 'class' name=ID
	(':' instantiatedClasses+=[OntoLClass|QualifiedName] (',' instantiatedClasses+=[OntoLClass|QualifiedName])*)?
	('specializes' superClasses+=[OntoLClass|QualifiedName] (',' superClasses+=[OntoLClass|QualifiedName])*)?
	('subordinatedTo' subordinators+=[OntoLClass|QualifiedName] (',' subordinators+=[OntoLClass|QualifiedName])*)?
	(
		(categorizationType=CategorizationType basetype=[OntoLClass|QualifiedName])
		| ('isPowertypeOf' powertypeOf=[OntoLClass|QualifiedName])
	)?
;

enum CategorizationType:
	CATEGORIZER | COMPLETE_CATEGORIZER | DISJOINT_CATEGORIZER | PARTITIONER
;

Attribute:
	'att' name=ID ':' ('[' lowerBound=ELEMENTBOUND '..' upperBound=ELEMENTBOUND ']')?
	propertyType=[OntoLClass|QualifiedName]
	('subsets' subsetOf+=[Attribute|QualifiedName] (',' subsetOf+=[Attribute|QualifiedName])*)?
;

RegularityAttribute returns Attribute:
	regularity?='regularity'
	'att' name=ID ':' ('[' lowerBound=ELEMENTBOUND '..' upperBound=ELEMENTBOUND ']')?
	propertyType=[OntoLClass|QualifiedName]
	('subsets' subsetOf+=[Attribute|QualifiedName] (',' subsetOf+=[Attribute|QualifiedName])*)?
	(regularityType=RegularityAttributeType regulatedProperty=[Attribute|QualifiedName])?
;

enum RegularityAttributeType returns RegularityPropertyType:
	DETERMINES_MAX_VALUE | DETERMINES_MIN_VALUE 
	| DETERMINES_VALUE | DETERMINES_POSSIBLE_VALUES
	| DETERMINES_TYPE | DETERMINES_POSSIBLE_TYPES 
;

Reference: 
	'ref' name=ID ':' ('[' lowerBound=ELEMENTBOUND '..' upperBound=ELEMENTBOUND ']')?
	propertyType=[OntoLClass|QualifiedName]
	('subsets' subsetOf+=[Reference|QualifiedName] (',' subsetOf+=[Reference|QualifiedName])*)?
	('isOppositeTo' oppositeTo=[Reference|QualifiedName])?
;

RegularityReference returns Reference: 
	regularity?='regularity'
	'ref' name=ID ':' ('[' lowerBound=ELEMENTBOUND '..' upperBound=ELEMENTBOUND ']')?
	propertyType=[OntoLClass|QualifiedName]
	('subsets' subsetOf+=[Reference|QualifiedName] (',' subsetOf+=[Reference|QualifiedName])*)?
	('isOppositeTo' oppositeTo=[Reference|QualifiedName])?
	(regularityType=RegularityReferenceType regulatedProperty=[Reference|QualifiedName])?
;

enum RegularityReferenceType returns RegularityPropertyType:
	DETERMINES_VALUE | DETERMINES_POSSIBLE_VALUES
	| DETERMINES_TYPE | DETERMINES_POSSIBLE_TYPES 
;

ELEMENTBOUND returns ecore::EIntegerObject:
	'*' | INT
;

AttributeAssignment: 
	'att' attribute=[Attribute|QualifiedName] '='
	( 
		assignments+=DataValue 
		| '{' assignments+=DataValue (',' assignments+=DataValue)* '}'
	)
;

SimpleAttributeAssignment returns AttributeAssignment: 
	attribute=[Attribute|QualifiedName] '='
	( 
		assignments+=DataValue 
		| '{' assignments+=DataValue (',' assignments+=DataValue)* '}'
	)
;

ReferenceAssignment: 
	'ref' reference=[Reference|QualifiedName] '='
	( 
		assignments+=[EntityDeclaration|QualifiedName]
		| '{' assignments+=[EntityDeclaration|QualifiedName] (',' assignments+=[EntityDeclaration|QualifiedName])* '}'
	)
;

DataValue:
	StringValue | NumberValue | BooleanValue | NoneValue | ComplexDataValue
;

StringValue:
	value=STRING
;

NumberValue:
	value=NUMBER
;

NUMBER returns ecore::EDouble:
	 ('-')?INT('.'INT)?
;

BooleanValue:
	value=BOOLEAN
;

BOOLEAN returns ecore::EBoolean:
	'true'|'false'
;

NoneValue:
	{NoneValue} 'none'
;

ComplexDataValue returns ComplexDataValue:
	value = [Individual | QualifiedName] | unnamedValue = UnamedIndividual
;

UnamedIndividual returns Individual:
	'[' 
		attAssignments+=SimpleAttributeAssignment (',' attAssignments+=SimpleAttributeAssignment)*
	']'
;

GeneralizationSet:
	(
		isDisjoint?='disjoint' | isComplete?='complete'
		| isDisjoint?='disjoint' isComplete?='complete'
		| isComplete?='complete' isDisjoint?='disjoint'
	)?
	'genset' (name=ID)?
	'general' general=[OntoLClass|QualifiedName]
	('categorizer' categorizer=[OntoLClass|QualifiedName])?
	'specifics' specifics+=[OntoLClass|QualifiedName] (',' specifics+=[OntoLClass|QualifiedName])+
;
