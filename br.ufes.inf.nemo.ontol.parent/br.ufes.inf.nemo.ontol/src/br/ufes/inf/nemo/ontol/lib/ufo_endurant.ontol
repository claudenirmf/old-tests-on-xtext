module ontol.core.endurant
{

	import ontol.core.base.*;
	import ontol.core.meta.*;
	import ontol.core.datatype.*;
	
	include ontol.core.base;
	include ontol.core.meta;
	include ontol.core.datatype;
	
	/*
	 * 	requires ontol.core.datatypes;
	 *	requires ontol.core.base;
	 *	requires ontol.core.meta;
	 */
	
	orderless class Endurant : OrderlessClass, Category, Endurant specializes Thing;
	class Event : FirstOrderClass, Category, Endurant specializes Thing, Individual;
	
	disjoint complete genset temporal_properties
		general Thing
		specifics Endurant, Event;
	
	orderless class Substantial : OrderlessClass, Category, Endurant specializes Endurant;
	class Moment :  FirstOrderClass, Category, Endurant specializes Endurant, Individual
	{
		ref connectedTo : [1..*] Endurant
	};
	
	disjoint genset existential_dependence
		general Endurant
		specifics Substantial, Moment;
	
	class FunctionalComplex : FirstOrderClass, Category, Endurant specializes Substantial, Individual;
	class Collective : FirstOrderClass, Category, Endurant specializes Substantial, Individual;
	class AmountOfMatter : FirstOrderClass, Category, Endurant specializes Substantial, Individual;
	
	disjoint complete genset
		general Substantial
		specifics FunctionalComplex, Collective, AmountOfMatter;
	
	class Relator : FirstOrderClass, Category, Endurant specializes Moment
	{
		ref connects : [2..*] Endurant subsets connectedTo
	};
	class IntrinsicMoment : FirstOrderClass, Category, Endurant specializes Moment
	{
		ref inheresIn : Endurant subsets connectedTo
	};
	
	disjoint complete genset unique_existential_dependence
		general Moment
		specifics Relator, IntrinsicMoment;
	
	order 2 class ConcreteRelatorType : HighOrderClass, Endurant, Category 
		specializes Thing completeCategorizes Relator
	{
		regularity ref involvedRoles : [1..*] Role
	};
	
	class Mode : FirstOrderClass, Category, Endurant specializes IntrinsicMoment;
	class Quality : FirstOrderClass, Category, Endurant specializes IntrinsicMoment;
	
	disjoint complete genset meseurable_moment
		general IntrinsicMoment
		specifics Mode, Quality;
	
	// Is it possible to have externally dependent modes outside the context of a relator
	class ExternallyDependentMode : FirstOrderClass, Category, Endurant specializes Mode
	{
		ref externallyDependentOn : [1..*] Endurant
		ref partOf : Relator
	};
	
	class QuaIndividual : FirstOrderClass, Category, Endurant specializes ExternallyDependentMode;
	
	
}