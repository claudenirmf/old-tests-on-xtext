/**
 * generated by Xtext 2.10.0
 */
package br.ufes.inf.nemo.ontol.scoping;

import br.ufes.inf.nemo.ontol.scoping.AbstractOntoLScopeProvider;
import br.ufes.inf.nemo.ontol.util.OntoLUtils;
import com.google.inject.Inject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class OntoLScopeProvider extends AbstractOntoLScopeProvider {
  @Inject
  @Extension
  private OntoLUtils _ontoLUtils;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field propertyAssignment_Property is undefined for the type ModelPackage"
      + "\nThe method or field propAssigns is undefined for the type EntityDeclaration"
      + "\nThe method or field property_SubsetOf is undefined for the type ModelPackage"
      + "\nThe method or field props is undefined for the type Class"
      + "\nThe method or field name is undefined for the type Object"
      + "\nThe method or field name is undefined for the type Object"
      + "\nThe method or field eContainer is undefined for the type Object"
      + "\nThe method or field name is undefined for the type Object"
      + "\nThe method or field name is undefined for the type Object"
      + "\nThe method or field property_OppositeTo is undefined for the type ModelPackage"
      + "\nThe method or field propertyType is undefined for the type Property"
      + "\nThe method or field propertyType is undefined for the type Object"
      + "\nThe method or field props is undefined for the type Class"
      + "\nThe method or field name is undefined for the type EObject"
      + "\nBounds mismatch: The type argument <Object> is not a valid substitute for the bounded type parameter <T extends EObject> of the method scopeFor(Iterable<? extends T>, Function<T, QualifiedName>, IScope)"
      + "\nequals cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nprops cannot be resolved"
      + "\nfilter cannot be resolved"
      + "\n== cannot be resolved");
  }
}
