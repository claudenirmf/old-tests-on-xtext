/**
 * generated by Xtext 2.10.0
 */
package br.ufes.inf.nemo.ontol.validation;

import br.ufes.inf.nemo.ontol.model.EntityDeclaration;
import br.ufes.inf.nemo.ontol.model.GeneralizationSet;
import br.ufes.inf.nemo.ontol.model.HOClass;
import br.ufes.inf.nemo.ontol.model.ModelPackage;
import br.ufes.inf.nemo.ontol.util.OntoLUtils;
import br.ufes.inf.nemo.ontol.validation.AbstractOntoLValidator;
import br.ufes.inf.nemo.ontol.validation.LinguisticRules;
import br.ufes.inf.nemo.ontol.validation.MLTRules;
import com.google.inject.Inject;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class OntoLValidator extends AbstractOntoLValidator {
  @Inject
  @Extension
  private OntoLUtils _ontoLUtils;
  
  @Inject
  @Extension
  private LinguisticRules _linguisticRules;
  
  @Inject
  @Extension
  private MLTRules _mLTRules;
  
  public final static String INSTANTIATION_OF_DISJOINT_TYPES = "br.ufes.inf.nemo.ontol.InstantiationOfDisjointTypes";
  
  public final static String MISSING_COMPLETE_INSTANTIATION = "br.ufes.inf.nemo.ontol.MissingCompleteInstantiation";
  
  public final static String POWERTYPE_COMPLETE_SPECIALIZATION = "br.ufes.inf.nemo.ontol.PowertypeCompleteSpecialization";
  
  public final static String COMPLETE_CHARACTERIZATION_AND_COMPLETENESS = "br.ufes.inf.nemo.ontol.CompleteCharacterizationAndCompleteness";
  
  public final static String DISJOINT_CHARACTERIZATION_AND_DISJOINTNESS = "br.ufes.inf.nemo.ontol.DisjointCharacterizationAndDisjointness";
  
  public final static String MANDATORY_SPECIALIZATION_OF_ENDURANT = "br.ufes.inf.nemo.ontol.MandaorySpecializationOfEndurant";
  
  public final static String NONSORTAL_SPECIALIZING_SORTAL = "br.ufes.inf.nemo.ontol.NonSortalSpecializingSortal";
  
  public final static String RIGID_SPECIALIZING_ANTIRIGID = "br.ufes.inf.nemo.ontol.RigidSpecializingAntiRigid";
  
  public final static String SEMIRIGID_SPECIALIZING_ANTIRIGID = "br.ufes.inf.nemo.ontol.SemiRigidSpecializingAntiRigid";
  
  public final static String MULTIPLE_IDENTITIES = "br.ufes.inf.nemo.ontol.MultipleIdentities";
  
  public final static String MISSING_IDENTITY = "br.ufes.inf.nemo.ontol.MissingIdentity";
  
  public final static String NECESSARY_INSTANTIATION = "br.ufes.inf.nemo.ontol.NecessaryInstantiation";
  
  public final static String MISSING_SPECIALIZATION_TO_BASETYPE = "br.ufes.inf.nemo.ontol.MissingSpecializationToBasetype";
  
  @Check(CheckType.FAST)
  public void fastChecksOnEntityDeclaration(final EntityDeclaration e) {
    boolean _isNameValid = this._linguisticRules.isNameValid(e);
    boolean _not = (!_isNameValid);
    if (_not) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Entity name must start with a capital letter.");
      EAttribute _entityDeclaration_Name = ModelPackage.eINSTANCE.getEntityDeclaration_Name();
      this.error(_builder.toString(), _entityDeclaration_Name, 
        LinguisticRules.INVALID_ENTITY_DECLARATION_NAME);
    }
    boolean _duplicatedEntityName = this._linguisticRules.duplicatedEntityName(e);
    if (_duplicatedEntityName) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Entity name must be unique.");
      EAttribute _entityDeclaration_Name_1 = ModelPackage.eINSTANCE.getEntityDeclaration_Name();
      this.error(_builder_1.toString(), _entityDeclaration_Name_1, 
        LinguisticRules.DUPLICATED_ENTITY_NAME);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastCheckOnClass(final br.ufes.inf.nemo.ontol.model.Class c) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field class_SuperClasses is undefined for the type ModelPackage"
      + "\nThe method or field class_SuperClasses is undefined for the type ModelPackage"
      + "\nThe method or field class_Basetype is undefined for the type ModelPackage"
      + "\nThe method or field class_PowertypeOf is undefined for the type ModelPackage"
      + "\nThe method or field class_Subordinators is undefined for the type ModelPackage");
  }
  
  @Check(CheckType.FAST)
  public void fastChecksOnHOClass(final HOClass ho) {
    boolean _minOrder = this._mLTRules.minOrder(ho);
    boolean _not = (!_minOrder);
    if (_not) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Order must be of ");
      _builder.append(MLTRules.MIN_ORDER, "");
      _builder.append(" or greater.");
      EAttribute _hOClass_Order = ModelPackage.eINSTANCE.getHOClass_Order();
      this.error(_builder.toString(), _hOClass_Order, 
        MLTRules.INVALID_HO_CLASS_ORDER);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastChecksOnGeneralizationSet(final GeneralizationSet gs) {
    boolean _hasValidMembers = this._linguisticRules.hasValidMembers(gs);
    boolean _not = (!_hasValidMembers);
    if (_not) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("This generalization set has invalid members.");
      EAttribute _generalizationSet_Name = ModelPackage.eINSTANCE.getGeneralizationSet_Name();
      this.error(_builder.toString(), _generalizationSet_Name, 
        LinguisticRules.INVALID_GENERALIZATION_SET_MEMBERS);
    }
  }
  
  @Check(CheckType.NORMAL)
  public void normalChecksOnEntity(final EntityDeclaration e) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field entityDeclaration_FixedTypes is undefined for the type ModelPackage"
      + "\nThe method or field entityDeclaration_FixedTypes is undefined for the type ModelPackage");
  }
  
  @Check(CheckType.NORMAL)
  public void normalChecksOnClass(final br.ufes.inf.nemo.ontol.model.Class c) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field class_SuperClasses is undefined for the type ModelPackage"
      + "\nThe method or field class_SuperClasses is undefined for the type ModelPackage"
      + "\nThe method or field class_Subordinators is undefined for the type ModelPackage"
      + "\nThe method or field class_Subordinators is undefined for the type ModelPackage");
  }
}
