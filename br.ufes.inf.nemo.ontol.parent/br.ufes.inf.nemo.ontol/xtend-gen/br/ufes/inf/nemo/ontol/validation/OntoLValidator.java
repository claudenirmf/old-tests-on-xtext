/**
 * generated by Xtext 2.10.0
 */
package br.ufes.inf.nemo.ontol.validation;

import br.ufes.inf.nemo.ontol.lib.OntoLLib;
import br.ufes.inf.nemo.ontol.model.EntityDeclaration;
import br.ufes.inf.nemo.ontol.model.FOClass;
import br.ufes.inf.nemo.ontol.model.GeneralizationSet;
import br.ufes.inf.nemo.ontol.model.HOClass;
import br.ufes.inf.nemo.ontol.model.ModelPackage;
import br.ufes.inf.nemo.ontol.model.OntoLClass;
import br.ufes.inf.nemo.ontol.util.OntoLUtils;
import br.ufes.inf.nemo.ontol.validation.AbstractOntoLValidator;
import br.ufes.inf.nemo.ontol.validation.LinguisticRules;
import br.ufes.inf.nemo.ontol.validation.MLTRules;
import br.ufes.inf.nemo.ontol.validation.UFORules;
import br.ufes.inf.nemo.ontol.validation.ValidationError;
import br.ufes.inf.nemo.ontol.validation.ValidationIssue;
import br.ufes.inf.nemo.ontol.validation.ValidationWarning;
import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class OntoLValidator extends AbstractOntoLValidator {
  @Inject
  @Extension
  private OntoLUtils _ontoLUtils;
  
  @Inject
  @Extension
  private OntoLLib _ontoLLib;
  
  @Inject
  @Extension
  private LinguisticRules _linguisticRules;
  
  @Inject
  @Extension
  private MLTRules _mLTRules;
  
  @Inject
  @Extension
  private UFORules _uFORules;
  
  public final static String INSTANTIATION_OF_DISJOINT_TYPES = "br.ufes.inf.nemo.ontol.InstantiationOfDisjointTypes";
  
  public final static String MISSING_COMPLETE_INSTANTIATION = "br.ufes.inf.nemo.ontol.MissingCompleteInstantiation";
  
  public final static String POWERTYPE_COMPLETE_SPECIALIZATION = "br.ufes.inf.nemo.ontol.PowertypeCompleteSpecialization";
  
  public final static String COMPLETE_CHARACTERIZATION_AND_COMPLETENESS = "br.ufes.inf.nemo.ontol.CompleteCharacterizationAndCompleteness";
  
  public final static String DISJOINT_CHARACTERIZATION_AND_DISJOINTNESS = "br.ufes.inf.nemo.ontol.DisjointCharacterizationAndDisjointness";
  
  public final static String MANDATORY_SPECIALIZATION_OF_ENDURANT = "br.ufes.inf.nemo.ontol.MandaorySpecializationOfEndurant";
  
  public final static String NONSORTAL_SPECIALIZING_SORTAL = "br.ufes.inf.nemo.ontol.NonSortalSpecializingSortal";
  
  public final static String RIGID_SPECIALIZING_ANTIRIGID = "br.ufes.inf.nemo.ontol.RigidSpecializingAntiRigid";
  
  public final static String SEMIRIGID_SPECIALIZING_ANTIRIGID = "br.ufes.inf.nemo.ontol.SemiRigidSpecializingAntiRigid";
  
  public final static String MULTIPLE_IDENTITIES = "br.ufes.inf.nemo.ontol.MultipleIdentities";
  
  public final static String MISSING_IDENTITY = "br.ufes.inf.nemo.ontol.MissingIdentity";
  
  public final static String NECESSARY_INSTANTIATION = "br.ufes.inf.nemo.ontol.NecessaryInstantiation";
  
  public final static String MISSING_SPECIALIZATION_TO_BASETYPE = "br.ufes.inf.nemo.ontol.MissingSpecializationToBasetype";
  
  public final static String UFO_A_MISSING_MUST_INSTANTIATION = "br.ufes.inf.nemo.ontol.ufo.a.MissingMustInstantiation";
  
  public final static String UFO_A_ILLEGAL_SORTAL_SPECIALIZATION = "br.ufes.inf.nemo.ontol.ufo.a.IllegalSortalSpecialization";
  
  public final static String UFO_A_ILLEGAL_RIGID_SPECIALIZATION = "br.ufes.inf.nemo.ontol.ufo.a.IllegalRigidSpecialization";
  
  @Check(CheckType.FAST)
  public void fastChecksOnEntityDeclaration(final EntityDeclaration e) {
    boolean _isNameValid = this._linguisticRules.isNameValid(e);
    boolean _not = (!_isNameValid);
    if (_not) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Entity name must start with a capital letter.");
      EAttribute _entityDeclaration_Name = ModelPackage.eINSTANCE.getEntityDeclaration_Name();
      this.error(_builder.toString(), _entityDeclaration_Name, 
        LinguisticRules.INVALID_ENTITY_DECLARATION_NAME);
    }
    boolean _duplicatedEntityName = this._linguisticRules.duplicatedEntityName(e);
    if (_duplicatedEntityName) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Entity name must be unique.");
      EAttribute _entityDeclaration_Name_1 = ModelPackage.eINSTANCE.getEntityDeclaration_Name();
      this.error(_builder_1.toString(), _entityDeclaration_Name_1, 
        LinguisticRules.DUPLICATED_ENTITY_NAME);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastCheckOnClass(final OntoLClass c) {
    final Set<OntoLClass> ch = this._ontoLUtils.classHierarchy(c);
    boolean _isValidSpecialization = this._linguisticRules.isValidSpecialization(c);
    boolean _not = (!_isValidSpecialization);
    if (_not) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Invalid specialization.");
      EReference _ontoLClass_SuperClasses = ModelPackage.eINSTANCE.getOntoLClass_SuperClasses();
      this.error(_builder.toString(), _ontoLClass_SuperClasses, 
        LinguisticRules.INVALID_CLASS_SPECIALIZATION);
    }
    boolean _hasCyclicSpecialization = this._linguisticRules.hasCyclicSpecialization(c, ch);
    if (_hasCyclicSpecialization) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Invalid cyclic specialization.");
      EReference _ontoLClass_SuperClasses_1 = ModelPackage.eINSTANCE.getOntoLClass_SuperClasses();
      this.error(_builder_1.toString(), _ontoLClass_SuperClasses_1, 
        LinguisticRules.CYCLIC_SPECIALIZATION);
    }
    boolean _hasValidBasetype = this._linguisticRules.hasValidBasetype(c);
    boolean _not_1 = (!_hasValidBasetype);
    if (_not_1) {
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("Invalid basetype.");
      EReference _ontoLClass_Basetype = ModelPackage.eINSTANCE.getOntoLClass_Basetype();
      this.error(_builder_2.toString(), _ontoLClass_Basetype, 
        LinguisticRules.INVALID_BASETYPE);
    }
    boolean _hasValidPowertypeRelation = this._linguisticRules.hasValidPowertypeRelation(c);
    boolean _not_2 = (!_hasValidPowertypeRelation);
    if (_not_2) {
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("Invalid powertype relation.");
      EReference _ontoLClass_PowertypeOf = ModelPackage.eINSTANCE.getOntoLClass_PowertypeOf();
      this.error(_builder_3.toString(), _ontoLClass_PowertypeOf, 
        LinguisticRules.INVALID_POWERTYPE_RELATION);
    }
    boolean _hasValidSubordinators = this._linguisticRules.hasValidSubordinators(c);
    boolean _not_3 = (!_hasValidSubordinators);
    if (_not_3) {
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("Invalid subordinator.");
      EReference _ontoLClass_Subordinators = ModelPackage.eINSTANCE.getOntoLClass_Subordinators();
      this.error(_builder_4.toString(), _ontoLClass_Subordinators, 
        LinguisticRules.INVALID_SUBORDINATOR);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastChecksOnHOClass(final HOClass ho) {
    boolean _minOrder = this._mLTRules.minOrder(ho);
    boolean _not = (!_minOrder);
    if (_not) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Order must be of ");
      _builder.append(MLTRules.MIN_ORDER, "");
      _builder.append(" or greater.");
      EAttribute _hOClass_Order = ModelPackage.eINSTANCE.getHOClass_Order();
      this.error(_builder.toString(), _hOClass_Order, 
        MLTRules.INVALID_HO_CLASS_ORDER);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastChecksOnGeneralizationSet(final GeneralizationSet gs) {
    boolean _hasValidMembers = this._linguisticRules.hasValidMembers(gs);
    boolean _not = (!_hasValidMembers);
    if (_not) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("This generalization set has invalid members.");
      EAttribute _generalizationSet_Name = ModelPackage.eINSTANCE.getGeneralizationSet_Name();
      this.error(_builder.toString(), _generalizationSet_Name, 
        LinguisticRules.INVALID_GENERALIZATION_SET_MEMBERS);
    }
  }
  
  @Check(CheckType.NORMAL)
  public void normalChecksOnEntity(final EntityDeclaration e) {
    final LinkedHashSet<OntoLClass> iof = this._ontoLUtils.getAllInstantiatedClasses(e);
    boolean _isInstanceOfDisjointClasses = this._linguisticRules.isInstanceOfDisjointClasses(e, iof);
    if (_isInstanceOfDisjointClasses) {
      StringConcatenation _builder = new StringConcatenation();
      String _name = e.getName();
      _builder.append(_name, "");
      _builder.append(" is instance of disjoint classes.");
      EReference _entityDeclaration_InstantiatedClasses = ModelPackage.eINSTANCE.getEntityDeclaration_InstantiatedClasses();
      this.error(_builder.toString(), _entityDeclaration_InstantiatedClasses, 
        LinguisticRules.INSTANCE_OF_DISJOINT_CLASSES);
    }
    boolean _missingInstantiationByCompleteness = this._linguisticRules.missingInstantiationByCompleteness(e, iof);
    if (_missingInstantiationByCompleteness) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Missing instantion of complete generalization set.");
      EReference _entityDeclaration_InstantiatedClasses_1 = ModelPackage.eINSTANCE.getEntityDeclaration_InstantiatedClasses();
      this.error(_builder_1.toString(), _entityDeclaration_InstantiatedClasses_1, 
        LinguisticRules.MISSING_INSTANTIATION_OF_COMPLETE_GENERALIZATION_SET);
    }
  }
  
  @Check(CheckType.NORMAL)
  public void normalChecksOnClass(final OntoLClass c) {
    final Set<OntoLClass> ch = this._ontoLUtils.classHierarchy(c);
    final LinkedHashSet<OntoLClass> iof = this._ontoLUtils.getAllInstantiatedClasses(c);
    boolean _isMissingSpecializationThroughPowertype = this._mLTRules.isMissingSpecializationThroughPowertype(c, ch);
    if (_isMissingSpecializationThroughPowertype) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Missing specialization through powertype relation.");
      EReference _ontoLClass_SuperClasses = ModelPackage.eINSTANCE.getOntoLClass_SuperClasses();
      this.error(_builder.toString(), _ontoLClass_SuperClasses, MLTRules.MISSING_SPECIALIZATION_THROUGH_POWERTYPE);
    }
    boolean _obeysSubordination = this._linguisticRules.obeysSubordination(c, ch, iof);
    boolean _not = (!_obeysSubordination);
    if (_not) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Missing specialization through subordination.");
      EReference _ontoLClass_SuperClasses_1 = ModelPackage.eINSTANCE.getOntoLClass_SuperClasses();
      this.error(_builder_1.toString(), _ontoLClass_SuperClasses_1, 
        LinguisticRules.MISSING_SPECIALIZATION_THROUGH_SUBODINATION);
    }
    boolean _hasSimpleSubordinationCycle = this._linguisticRules.hasSimpleSubordinationCycle(c);
    if (_hasSimpleSubordinationCycle) {
      StringConcatenation _builder_2 = new StringConcatenation();
      String _name = c.getName();
      _builder_2.append(_name, "");
      _builder_2.append(" is in a subordination cycle.");
      EReference _ontoLClass_Subordinators = ModelPackage.eINSTANCE.getOntoLClass_Subordinators();
      this.error(_builder_2.toString(), _ontoLClass_Subordinators, 
        LinguisticRules.SIMPLE_SUBORDINATION_CYCLE);
    }
    boolean _isSpecializingDisjointClasses = this._linguisticRules.isSpecializingDisjointClasses(c, ch);
    if (_isSpecializingDisjointClasses) {
      StringConcatenation _builder_3 = new StringConcatenation();
      String _name_1 = c.getName();
      _builder_3.append(_name_1, "");
      _builder_3.append(" is specializing disjoint classes.");
      EReference _ontoLClass_Subordinators_1 = ModelPackage.eINSTANCE.getOntoLClass_Subordinators();
      this.error(_builder_3.toString(), _ontoLClass_Subordinators_1, 
        LinguisticRules.SPECILIZATION_OF_DISJOINT_CLASSES);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void expensiveChecksOnFOClass(final FOClass c) {
    final Set<OntoLClass> ch = this._ontoLUtils.classHierarchy(((OntoLClass) c));
    final LinkedHashSet<OntoLClass> iof = this._ontoLUtils.getAllInstantiatedClasses(((OntoLClass) c));
    final OntoLClass endurant = this._ontoLLib.getUFOEndurant(c);
    final Set<OntoLClass> mustInstantiate = this._ontoLLib.getUFOMustInstantiateClasses(c);
    final OntoLClass mixinclass = this._ontoLLib.getLibClass(c, OntoLLib.UFO_A_MIXIN_CLASS);
    final OntoLClass rigidclass = this._ontoLLib.getLibClass(c, OntoLLib.UFO_A_RIGID_CLASS);
    final OntoLClass semirigidclass = this._ontoLLib.getLibClass(c, OntoLLib.UFO_A_SEMI_RIGID_CLASS);
    ValidationIssue issue = this._uFORules.mustInstantiateUFOMetaproperties(c, ch, iof, endurant, mustInstantiate);
    boolean _notEquals = (!Objects.equal(issue, null));
    if (_notEquals) {
      String _message = issue.getMessage();
      EObject _source = issue.getSource();
      EStructuralFeature _feature = issue.getFeature();
      String _code = issue.getCode();
      this.error(_message, _source, _feature, _code);
    }
    ValidationIssue _checkSpecializationAndSortality = this._uFORules.checkSpecializationAndSortality(c, ch, iof, mixinclass);
    issue = _checkSpecializationAndSortality;
    boolean _notEquals_1 = (!Objects.equal(issue, null));
    if (_notEquals_1) {
      String _message_1 = issue.getMessage();
      EObject _source_1 = issue.getSource();
      EStructuralFeature _feature_1 = issue.getFeature();
      String _code_1 = issue.getCode();
      this.error(_message_1, _source_1, _feature_1, _code_1);
    }
    ValidationIssue _checkSpecializationAndRigidity = this._uFORules.checkSpecializationAndRigidity(c, ch, iof, rigidclass, semirigidclass);
    issue = _checkSpecializationAndRigidity;
    boolean _notEquals_2 = (!Objects.equal(issue, null));
    if (_notEquals_2) {
      String _message_2 = issue.getMessage();
      EObject _source_2 = issue.getSource();
      EStructuralFeature _feature_2 = issue.getFeature();
      String _code_2 = issue.getCode();
      this.error(_message_2, _source_2, _feature_2, _code_2);
    }
  }
  
  private void _runIssue(final ValidationError issue) {
    final ValidationError it = issue;
    if ((((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (it.getIndex() != (-1))) && (!Objects.equal(it.getCode(), null))) && (!Objects.equal(it.getIssueData(), null)))) {
      String _message = it.getMessage();
      EObject _source = it.getSource();
      EStructuralFeature _feature = it.getFeature();
      int _index = it.getIndex();
      String _code = it.getCode();
      String[] _issueData = it.getIssueData();
      this.error(_message, _source, _feature, _index, _code, _issueData);
    } else {
      if (((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (!Objects.equal(it.getCode(), null))) && (!Objects.equal(it.getIssueData(), null)))) {
        String _message_1 = it.getMessage();
        EObject _source_1 = it.getSource();
        EStructuralFeature _feature_1 = it.getFeature();
        String _code_1 = it.getCode();
        String[] _issueData_1 = it.getIssueData();
        this.error(_message_1, _source_1, _feature_1, _code_1, _issueData_1);
      } else {
        if (((((!Objects.equal(it.getFeature(), null)) && (it.getIndex() != (-1))) && (!Objects.equal(it.getCode(), null))) && (!Objects.equal(it.getIssueData(), null)))) {
          String _message_2 = it.getMessage();
          EStructuralFeature _feature_2 = it.getFeature();
          int _index_1 = it.getIndex();
          String _code_2 = it.getCode();
          String[] _issueData_2 = it.getIssueData();
          this.error(_message_2, _feature_2, _index_1, _code_2, _issueData_2);
        } else {
          if ((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (it.getIndex() != (-1)))) {
            String _message_3 = it.getMessage();
            EObject _source_2 = it.getSource();
            EStructuralFeature _feature_3 = it.getFeature();
            int _index_2 = it.getIndex();
            this.error(_message_3, _source_2, _feature_3, _index_2);
          } else {
            if (((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null)))) {
              String _message_4 = it.getMessage();
              EObject _source_3 = it.getSource();
              EStructuralFeature _feature_4 = it.getFeature();
              this.error(_message_4, _source_3, _feature_4);
            } else {
              if ((((!Objects.equal(it.getFeature(), null)) && (!Objects.equal(it.getCode(), null))) && (!Objects.equal(it.getIssueData(), null)))) {
                String _message_5 = it.getMessage();
                EStructuralFeature _feature_5 = it.getFeature();
                String _code_3 = it.getCode();
                String[] _issueData_3 = it.getIssueData();
                this.error(_message_5, _feature_5, _code_3, _issueData_3);
              } else {
                if (((!Objects.equal(it.getFeature(), null)) && (it.getIndex() != (-1)))) {
                  String _message_6 = it.getMessage();
                  EStructuralFeature _feature_6 = it.getFeature();
                  int _index_3 = it.getIndex();
                  this.error(_message_6, _feature_6, _index_3);
                } else {
                  if (((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null)))) {
                    String _message_7 = it.getMessage();
                    EStructuralFeature _feature_7 = it.getFeature();
                    this.error(_message_7, _feature_7);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  private void _runIssue(final ValidationWarning issue) {
    final ValidationWarning it = issue;
    if ((((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (it.getIndex() != (-1))) && (!Objects.equal(it.getCode(), null))) && (!Objects.equal(it.getIssueData(), null)))) {
      String _message = it.getMessage();
      EObject _source = it.getSource();
      EStructuralFeature _feature = it.getFeature();
      int _index = it.getIndex();
      String _code = it.getCode();
      String[] _issueData = it.getIssueData();
      this.warning(_message, _source, _feature, _index, _code, _issueData);
    } else {
      if (((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (!Objects.equal(it.getCode(), null))) && (!Objects.equal(it.getIssueData(), null)))) {
        String _message_1 = it.getMessage();
        EObject _source_1 = it.getSource();
        EStructuralFeature _feature_1 = it.getFeature();
        String _code_1 = it.getCode();
        String[] _issueData_1 = it.getIssueData();
        this.warning(_message_1, _source_1, _feature_1, _code_1, _issueData_1);
      } else {
        if ((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (it.getIndex() != (-1)))) {
          String _message_2 = it.getMessage();
          EObject _source_2 = it.getSource();
          EStructuralFeature _feature_2 = it.getFeature();
          int _index_1 = it.getIndex();
          this.warning(_message_2, _source_2, _feature_2, _index_1);
        } else {
          if (((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null)))) {
            String _message_3 = it.getMessage();
            EObject _source_3 = it.getSource();
            EStructuralFeature _feature_3 = it.getFeature();
            this.warning(_message_3, _source_3, _feature_3);
          } else {
            if (((((!Objects.equal(it.getFeature(), null)) && (it.getIndex() != (-1))) && (!Objects.equal(it.getCode(), null))) && (!Objects.equal(it.getIssueData(), null)))) {
              String _message_4 = it.getMessage();
              EStructuralFeature _feature_4 = it.getFeature();
              int _index_2 = it.getIndex();
              String _code_2 = it.getCode();
              String[] _issueData_2 = it.getIssueData();
              this.warning(_message_4, _feature_4, _index_2, _code_2, _issueData_2);
            } else {
              if ((((!Objects.equal(it.getFeature(), null)) && (!Objects.equal(it.getCode(), null))) && (!Objects.equal(it.getIssueData(), null)))) {
                String _message_5 = it.getMessage();
                EStructuralFeature _feature_5 = it.getFeature();
                String _code_3 = it.getCode();
                String[] _issueData_3 = it.getIssueData();
                this.warning(_message_5, _feature_5, _code_3, _issueData_3);
              } else {
                if (((!Objects.equal(it.getFeature(), null)) && (it.getIndex() != (-1)))) {
                  String _message_6 = it.getMessage();
                  EStructuralFeature _feature_6 = it.getFeature();
                  int _index_3 = it.getIndex();
                  this.warning(_message_6, _feature_6, _index_3);
                } else {
                  if (((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null)))) {
                    String _message_7 = it.getMessage();
                    EStructuralFeature _feature_7 = it.getFeature();
                    this.warning(_message_7, _feature_7);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  private void runIssue(final ValidationIssue issue) {
    if (issue instanceof ValidationError) {
      _runIssue((ValidationError)issue);
      return;
    } else if (issue instanceof ValidationWarning) {
      _runIssue((ValidationWarning)issue);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(issue).toString());
    }
  }
}
