@Ecore(nsURI="http://www.nemo.inf.ufes.br/ontol/OntoL")
@GenModel(modelDirectory="br.ufes.inf.nemo.ontol.model/src-gen")
package br.ufes.inf.nemo.ontol.model

class Model
{
	String name
	contains ModelElement[] elements
}

abstract class ModelElement {}

class Import extends ModelElement
{
	String importedNamespace
}

class Include extends ModelElement
{
	refers Model include
}

abstract class EntityDeclaration extends ModelElement 
{
	String name
	refers OntoLClass[] instantiatedClasses
//	contains PropertyAssignment[] propAssigns // opposite classContainer
	contains AttributeAssignment[] attAssignments
	contains ReferenceAssignment[] refAssignments
}

class Individual extends EntityDeclaration {}

abstract class OntoLClass extends EntityDeclaration 
{
	refers OntoLClass[] superClasses
	refers OntoLClass powertypeOf
	refers OntoLClass basetype
	refers OntoLClass[] subordinators
//	contains Property[] props // opposite classContainer
	contains Attribute[] attributes
	contains Reference[] references
	CategorizationType categorizationType = "none"
}

enum CategorizationType 
{
	NONE as "none" = 0
	CATEGORIZER as "categorizes" = 1
	DISJOINT_CATEGORIZER as "disjointcategorizes" = 2
	COMPLETE_CATEGORIZER as "completecategorizes" = 3
	PARTITIONER as "partitions" = 4
}

class OrderlessClass extends OntoLClass {}

abstract class OrderedClass extends OntoLClass {}

class HOClass extends OrderedClass
{
	Integer order
}

class FOClass extends OrderedClass {}

class GeneralizationSet extends ModelElement 
{
	String name = "anonymous"
	boolean isDisjoint = "false"
	boolean isComplete = "false"
	refers OntoLClass general
	refers OntoLClass categorizer
	refers OntoLClass[] specifics
}

class Property extends ModelElement 
{
	String name
	Integer lowerBound = "1"
	Integer upperBound = "1"
	refers OntoLClass propertyClass
//	container OntoLClass classContainer opposite props
}

class Attribute extends Property 
{
	refers Attribute[] subsetOf
	refers Attribute oppositeTo
}

class Reference extends Property 
{
	refers Reference[] subsetOf
	refers Reference oppositeTo
}

class PropertyAssignment extends ModelElement 
{
//	refers Property property
//	contains Value assignment
//	container EntityDeclaration classContainer opposite propAssigns
}

class AttributeAssignment extends PropertyAssignment
{
	refers Attribute attribute
	contains DataValue[] assignments
}

class ReferenceAssignment extends PropertyAssignment
{
	refers Reference reference
	contains ReferenceValue[] assignments
}

abstract class Value extends ModelElement 
{
	op int getNAssignments() { return 0; }
}

class ReferenceValue extends Value 
{
	refers EntityDeclaration value
	op int getNAssignments() { return 1 }
}

abstract class DataValue extends Value 
{
	op int getNAssignments() { return 1 }
}

class StringValue extends DataValue 
{
	String value
}

class NumberValue extends DataValue
{
	double value
}

class BooleanValue extends DataValue
{
	boolean value
}

class NoneValue extends DataValue
{
	op Object getValue() { return null }
	op int getNAssignments(){ return 0 }
}
